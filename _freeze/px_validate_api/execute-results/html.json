{
  "hash": "5d34770f7da0fa5b6a0e8d4da9ce74e8",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Validating PX-files via API\"\nformat: html\neditor_options: \n  chunk_output_type: console\n---\n\n\n\n\n\n## The `pxweb` package\n\nThe `pxweb` package has functions to work with the PX-web APIs. It works with any PX-web database, which has the API feature enabled. So below we collect a table from the [Ghanaian StatsBank](https://statsbank.statsghana.gov.gh/pxweb/en/PHC%202021%20StatsBank/).\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(pxweb)\nlibrary(tidyverse)\n\nfrom_api <- pxweb_get(url = \"https://statsbank.statsghana.gov.gh:443/api/v1/en/PHC 2021 StatsBank/Education and Literacy/attended_table.px\",\n                      query = list(\n                        Highest_level_of_education = c(\"*\"),\n                        Geographic_Area = c(\"Ghana\"),\n                        Locality = c(\"*\"),\n                        Sex = c(\"*\"),\n                        Age = c(\"All ages\", \"15-17 years\", \"18 years & older\"))) %>% \n  as.data.frame() %>% \n  as_tibble() # as_tibble for nicer presentation\n\nhead(from_api)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 6\n  Highest_level_of_education Geographic_Area Locality           Sex        Age  \n  <chr>                      <chr>           <chr>              <chr>      <chr>\n1 Total                      Ghana           All Locality Types Both sexes All …\n2 Total                      Ghana           All Locality Types Both sexes 15-1…\n3 Total                      Ghana           All Locality Types Both sexes 18 y…\n4 Total                      Ghana           All Locality Types Male       All …\n5 Total                      Ghana           All Locality Types Male       15-1…\n6 Total                      Ghana           All Locality Types Male       18 y…\n# ℹ 1 more variable: `Population (15 years and older)` <dbl>\n```\n\n\n:::\n:::\n\n\n\n\n\nIf we want to update this table with data for a new year then we can use data from the API to validate that our data for the new year looks like expected. So now we create some new random data from the dataset for a new year.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"generate random data\"}\nset.seed(42); new_year <- from_api %>% \n  mutate(`Population (15 years and older)_new_year` = sample(`Population (15 years and older)`),\n         .keep = \"unused\")\n```\n:::\n\n\n\n\n\nNow we can join the data together and check for developments.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npct_change <- from_api %>% \n  left_join(new_year,\n            by = join_by(Highest_level_of_education, \n                         Geographic_Area, Locality, \n                         Sex, Age)) %>% \n  mutate(pct_change = (`Population (15 years and older)_new_year` - `Population (15 years and older)`)/\n           `Population (15 years and older)`*100)\n```\n:::\n\n\n\n\n\nNow we can use this new column `pct_change` to see if we have some unexpected high changes (above 10 %), which might indicate some problems in our code generating the data.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nif(max(abs(pct_change$pct_change), na.rm = TRUE) > 10){\n    warning(\"There are changes above 10 % for the new year. It may indicate problems with the data\")\n  print(pct_change %>% \n          filter(abs(pct_change) > 10))\n} else {\n  cat(\"No changes above 10 %\")\n}\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: There are changes above 10 % for the new year. It may indicate\nproblems with the data\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 445 × 8\n   Highest_level_of_education Geographic_Area Locality           Sex       Age  \n   <chr>                      <chr>           <chr>              <chr>     <chr>\n 1 Total                      Ghana           All Locality Types Both sex… All …\n 2 Total                      Ghana           All Locality Types Both sex… 15-1…\n 3 Total                      Ghana           All Locality Types Both sex… 18 y…\n 4 Total                      Ghana           All Locality Types Male      All …\n 5 Total                      Ghana           All Locality Types Male      15-1…\n 6 Total                      Ghana           All Locality Types Male      18 y…\n 7 Total                      Ghana           All Locality Types Female    All …\n 8 Total                      Ghana           All Locality Types Female    15-1…\n 9 Total                      Ghana           All Locality Types Female    18 y…\n10 Total                      Ghana           Rural              Both sex… All …\n# ℹ 435 more rows\n# ℹ 3 more variables: `Population (15 years and older)` <dbl>,\n#   `Population (15 years and older)_new_year` <dbl>, pct_change <dbl>\n```\n\n\n:::\n:::\n\n\n\n\n\nWe see that we have some extremely high changes. For example the value for the total across the variables has gone from 11,289,655 to 569. This clearly indicates a mistake. In this case the mistake stems from our random data generation. We can instead do it in a little more controlled proces.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Controlled data generation\"}\nset.seed(42); new_year <- from_api %>% \n  mutate(`Population (15 years and older)_new_year` = \n           `Population (15 years and older)` * runif(n(), 0.9, 1.1),\n         .keep = \"unused\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npct_change <- from_api %>% \n  left_join(new_year,\n            by = join_by(Highest_level_of_education, \n                         Geographic_Area, Locality, \n                         Sex, Age)) %>% \n  mutate(pct_change = (`Population (15 years and older)_new_year` - `Population (15 years and older)`)/\n           `Population (15 years and older)`*100)\n\nif(max(abs(pct_change$pct_change), na.rm = TRUE) > 10){\n  print(pct_change %>% \n          filter(abs(pct_change) > 10))\n  stop(\"There are changes above 10 % for the new year. It may indicate problems with the data\")\n} else {\n  cat(\"No changes above 10 %\")\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNo changes above 10 %\n```\n\n\n:::\n:::\n\n\n\n\n\nNow we have none year-to-year changes above 10 % (of course because our data generation process set a limit on 10 %). This limit of 10 % is not set in stone and should be adjusted according to the content of the data. For example some countries have seen inflation rates above 10 %, so in that case the relevant number might be another.\n\nHere we checked using data from the PX-web API, also to showcase the API. If the PX-file is available on disk, it may be easier just to load that and then do some validation checks.\n\nThe R package `validate` is specially focus on tools and function for validating data. For more information on data validation see [The Data Validation Cookbook](https://cran.r-project.org/web/packages/validate/vignettes/cookbook.html), which introduces the R-package `validate` and in general data validation concepts and implementations in R.\n\n## Check cross-sums\n\nUsually in a Statbank/PX-web database we have more tables covering one topic, e.g. multiple tables to cover the theme of population statistics. Often these tables will share some variables (sex and age would be prime examples) and therefore we expect values to be the same across tables.\n\nWe have our data collected from the [Ghanaian StatsBank](https://statsbank.statsghana.gov.gh/pxweb/en/PHC%202021%20StatsBank/PHC%202021%20StatsBank__Education%20and%20Literacy/attended_table.px/) about education statistics for persons 15 year and older who attended school in the past.\n\nWe have another table about [Population (3 years and older) by School Attendance Status, District, Region, Type of Locality, Age and Sex](https://statsbank.statsghana.gov.gh/pxweb/en/PHC%202021%20StatsBank/PHC%202021%20StatsBank__Education%20and%20Literacy/sch_attend_stat_table.px/) and here we would expect that it shares some values with our table from earlier if we filter to school attendance status to attended in past and age over 15 years. So now we collect this data using the `pxweb` package.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncheck_table <- pxweb_get(url = \"https://statsbank.statsghana.gov.gh:443/api/v1/en/PHC 2021 StatsBank/Education and Literacy/sch_attend_stat_table.px\",\n                      query = list(\n                        Schoolattendancestatus = c(\"Attended in the past\"),\n                        Geographic_Area = c(\"Ghana\"),\n                        Locality = c(\"*\"),\n                        Sex = c(\"*\"),\n                        Age = c(\"15-19\", \"20-24\", \"25-29\", \"30-34\",\n                                \"35-39\", \"40-44\", \"45-49\", \"50-54\",\n                                \"55-59\", \"60-64\", \"65-69\", \"70-74\",\n                                \"75-79\", \"80-84\", \"85-89\", \"90-94\",\n                                \"95-99\", \"100+\"))) %>% \n  as.data.frame() %>% \n  mutate(Locality = if_else(Locality == \"All locality types\", \n                            \"All Locality Types\",\n                            Locality)) %>% \n  as_tibble() # as_tibble for nicer presentation\n\nhead(check_table)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 6\n  Schoolattendancestatus Geographic_Area Locality           Sex        Age  \n  <chr>                  <chr>           <chr>              <chr>      <chr>\n1 Attended in the past   Ghana           All Locality Types Both sexes 15-19\n2 Attended in the past   Ghana           All Locality Types Both sexes 20-24\n3 Attended in the past   Ghana           All Locality Types Both sexes 25-29\n4 Attended in the past   Ghana           All Locality Types Both sexes 30-34\n5 Attended in the past   Ghana           All Locality Types Both sexes 35-39\n6 Attended in the past   Ghana           All Locality Types Both sexes 40-44\n# ℹ 1 more variable: `Population (3 years and older)` <dbl>\n```\n\n\n:::\n:::\n\n\n\n\n\nThis table we want to check with uses another age definition, so we just need to sum up all the age groups to have persons over the age of 15.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncheck_table_above_15 <- check_table %>% \n  summarise(`Population (3 years and older)` = sum(`Population (3 years and older)`),\n            .by = c(Schoolattendancestatus, Geographic_Area, Locality, Sex))\n```\n:::\n\n\n\n\n\nNow we have the values for persons of the age of 15 and over, which would correspond to the value for all ages in our initial table. So let's select the corresponding variables between the tables and join them together.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncross_check <- from_api %>%\n  filter(Age == \"All ages\" & Highest_level_of_education == \"Total\") %>% \n  select(Geographic_Area, Locality, Sex, `Population (15 years and older)`) %>% \n  ## Joining data together\n  left_join(check_table_above_15 %>% \n              select(Geographic_Area, Locality, Sex, `Population (3 years and older)`),\n            by = join_by(Geographic_Area, Locality, Sex)) %>% \n  ## Calculating difference\n  mutate(diff = `Population (15 years and older)` - `Population (3 years and older)`)\n```\n:::\n\n\n\n\n\n\nNow we have joined the two tables together and calculated a difference variable that hopefully should be 0.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nunique(cross_check$diff)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0\n```\n\n\n:::\n:::\n\n\n\n\n\nWhich it is. So the values shared across the two tables are the same, which is good as it indicates a consistent methodology in the two tables. This could also be a way to check a new generated PX-table, if you know that you have a PX-table in your database, which shares some of the values.\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}