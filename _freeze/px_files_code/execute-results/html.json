{
  "hash": "ae6a0cb6710ab139dc2e4d793fd02a65",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Codes in PX-files\"\nformat: html\neditor_options: \n  chunk_output_type: console\n---\n\n\n\n\n## Code or text\n\nWhen working with PX-files, it is recommended to use codes if possible and then use code labels for a representation of that code. For a simple variable \"sex,\" this could be 1 = Male and 2 = Female. So 1 and 2 are the codes, and \"Male\" and \"Female\" are the code labels. However, this also requires some sort of management of the codes and code labels. This will help ensure consistent codes and labels throughout the PX-web database and also make changes easier.\n\nInstead of having to make sure to update each file with a change to a label, it can be done in a master file of codes and labels, and then the files can be rerun. Of course, this assumes that each file uses the codes and labels from the master file.\n\n### Data formats with codes\n\nSome data formats actually have these code-text pairs in them. This is often the case for the Stata (.dta) and SPSS (.sav) formats, and sometimes the SAS format (.sas7bdat).\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(haven)\nlibrary(tidyverse)\n\nread_dta(\"data/RW_LFS2024.dta\", n_max = 5) %>% \n  select(province, Code_UR, code_dis, A01)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 4\n  province        Code_UR   code_dis        A01       \n  <dbl+lbl>       <dbl+lbl> <dbl+lbl>       <dbl+lbl> \n1 1 [Kigali city] 1 [Urban] 11 [Nyarugenge] 1 [Male]  \n2 1 [Kigali city] 1 [Urban] 11 [Nyarugenge] 2 [Female]\n3 1 [Kigali city] 1 [Urban] 11 [Nyarugenge] 2 [Female]\n4 1 [Kigali city] 1 [Urban] 11 [Nyarugenge] 1 [Male]  \n5 1 [Kigali city] 1 [Urban] 11 [Nyarugenge] 2 [Female]\n```\n\n\n:::\n:::\n\n\n\n\nWe have just selected a few variables and can see that the Stata dataset for the 2024 Rwandan Labour Force Survey indeed has codes associated with text. We can use the package `sjlabelled` to extract the codes from the Stata dataset.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlabels_codes <- read_dta(\"data/RW_LFS2024.dta\", n_max = 5) %>% \n  ## We use the namespace as sjlabelled has conflicting\n  ## functions with other packages\n  sjlabelled::get_labels(values = \"as.prefix\")\n\nlabels_codes[5:7]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$province\n[1] \"[1] Kigali city\"       \"[2] Southern Province\" \"[3] Western Province\" \n[4] \"[4] Northern Province\" \"[5] Eastern Province\" \n\n$Code_UR\n[1] \"[1] Urban\" \"[2] Rural\"\n\n$code_dis\n [1] \"[11] Nyarugenge\" \"[12] Gasabo\"     \"[13] Kicukiro\"   \"[21] Nyanza\"    \n [5] \"[22] Gisagara\"   \"[23] Nyaruguru\"  \"[24] Huye\"       \"[25] Nyamagabe\" \n [9] \"[26] Ruhango\"    \"[27] Muhanga\"    \"[28] Kamonyi\"    \"[31] Karongi\"   \n[13] \"[32] Rutsiro\"    \"[33] Rubavu\"     \"[34] Nyabihu\"    \"[35] Ngororero\" \n[17] \"[36] Rusizi\"     \"[37] Nyamasheke\" \"[41] Rulindo\"    \"[42] Gakenke\"   \n[21] \"[43] Musanze\"    \"[44] Burera\"     \"[45] Gicumbi\"    \"[51] Rwamagana\" \n[25] \"[52] Nyagatare\"  \"[53] Gatsibo\"    \"[54] Kayonza\"    \"[55] Kirehe\"    \n[29] \"[56] Ngoma\"      \"[57] Bugesera\"  \n```\n\n\n:::\n:::\n\n\n\n\nUsing the `get_labels` function from `sjlabelled` with the argument `values = \"as.name\"`, we get all the labels with a value/code as a variable name. It is saved as a list object in R. A few variables with their labels and codes are shown in the output above.\n\nWith some manipulation of the list, we get a tibble with the following variables: `variable-code`, `code`, and `values`. There is a lot going on in the code below. For better understanding of the `map` function, see the documentation for the package [`purrr`](). It also uses some regular expressions in functions from the [`stringr`]() package.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlabel_codes_df <- labels_codes %>%\n  map(as_tibble) %>% \n  ## Removes empty tibbles or with only 1 option\n  keep(~nrow(.x) > 1) %>% \n  map(~mutate(.x,\n              code = str_extract(.x$value, \"\\\\d+\"),\n              values = str_remove(.x$value, \"\\\\[\\\\d+]\\\\s+\"))) %>% \n  map(~select(.x, -value)) %>% \n  as_tibble_col() %>% \n  mutate(`variable-code` = names(value)) %>%\n  unnest(value) %>% \n  select(`variable-code`, code, values)\n\nhead(label_codes_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 3\n  `variable-code` code  values           \n  <chr>           <chr> <chr>            \n1 province        1     Kigali city      \n2 province        2     Southern Province\n3 province        3     Western Province \n4 province        4     Northern Province\n5 province        5     Eastern Province \n6 Code_UR         1     Urban            \n```\n\n\n:::\n:::\n\n\n\n\nNow we have a data frame with variable names, codes, and labels, which we can use in the PX-files. This could also be exported as Excel format and maintained. The data frame can also be used in the function `px_values` now, if the dataset contains codes and not texts.\n\nWe can also save these code and label pairs in PX-files and use them when generating our PX-files. We read in our data again, convert it to PX-format, and add the labels in `px_values`. When converting to PX-format, it assumes that the last column is a frequency column. This is not the case here, which is why we set all variables as stub in `px_stub()`. Then we use `px_micro()` to save multiple PX-files, one for each of our variables in this case, in the output folder \"code-labels\". Now it is possible for us to maintain the metadata for each of our variables using the PX-files.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(pxmake)\n\nrw_lfs <- read_dta(\"data/RW_LFS2024.dta\")\n\nrw_lfs %>% \n  select(any_of(unique(label_codes_df$`variable-code`))) %>% \n  px() %>% \n  px_values(label_codes_df) %>% \n  px_stub(names(rw_lfs)) %>% \n  px_micro(\"code-labels\")\n```\n:::\n\n\n\n\nThis code might take some time to run if the dataset has many variables (as is the case with the Rwandan Labour Force Survey).\n\n### Alternative methods\n\nThis was a data-driven approach on how to retrieve the codes and labels from the data. In a more metadata-driven approach, we could have an external database with variable names, codes, and values, which could be connected to either via a database connection or an API. This approach could prove to be more stable. However, it requires maintenance to ensure that the values in the data also reflect the metadata values in the database.",
    "supporting": [
      "px_files_code_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}