{
  "hash": "9de709a4a160ececfde51cce568dbb51",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Working with time in PX-files\"\nformat: html\neditor_options: \n  chunk_output_type: console\n---\n\n\n\n\n\n## TIMEVAL keyword in PX-file\n\nThe PX-file format has a specific keyword to deal with time series data. It is not so different from any other variable, but it helps the plotting feature in PX-web to identify that the table contains a time variable and make a meaningful plot for the user.\n\nThe TIMEVAL keyword can handle have a format of yearly, half-yearly, quarterly, monthly or weekly.\n\nIt follows the following formats:\n\n- Annual: 2024, 2025\n- Half-yearly: 2025H1, 2025H2\n- Quaterly: 2025Q1, 2025Q2, 2025Q3, 2025Q4\n- Monthly: 2025M01, 2025M02, 2025M03, 2025M04\n- Weekly: 2025W01, 2025W02, 2025W03, 2025W04\n\nBelow we import an example PX-file with employment data. It has the variables `Time` and `Quarter` and we want to join them together to make it easier for our users for PX-web when using the plot feature.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(pxmake)\nlibrary(tidyverse)\n\npx(\"data/Employment_example_tab1.px\") %>% \n  px_data()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 252 × 5\n   Sex    Education                    Time  Quarter figures_\n   <chr>  <chr>                        <chr> <chr>      <dbl>\n 1 \" All\" Employed population aged 16+ 2021  Q1      3204924.\n 2 \" All\" Employed population aged 16+ 2021  Q2      3133607.\n 3 \" All\" Employed population aged 16+ 2021  Q3      3179124.\n 4 \" All\" Employed population aged 16+ 2021  Q4      3633132.\n 5 \" All\" Employed population aged 16+ 2022  Q1      3585651.\n 6 \" All\" Employed population aged 16+ 2022  Q2      3317268.\n 7 \" All\" Employed population aged 16+ 2022  Q3      3711254.\n 8 \" All\" Employed population aged 16+ 2022  Q4      3571236.\n 9 \" All\" Employed population aged 16+ 2023  Q1      3803942.\n10 \" All\" Employed population aged 16+ 2023  Q2      3984502.\n# ℹ 242 more rows\n```\n\n\n:::\n:::\n\n\n\n\n\nThis can be done with just a few lines of code. However, the code below is quite compact and has a lot going on. It imports the PX-file we want to change, retrieve the data, joining together year and quarter to one variable called `Time`. Afterwards, the data in the PX-file is changed to our new modified dataset. We set the TIMEVAL keyword to `Time` and save the new PX-file.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npx(\"data/Employment_example_tab1.px\") %>% \n  px_data() %>% \n  # Use .keep to only preserve Time and drop quarter\n  mutate(Time = paste0(Time, Quarter), .keep = \"unused\") %>% \n  # Assign data to px-file\n  px_data(px(\"data/Employment_example_tab1.px\"), .) %>% \n  px_timeval(\"Time\") %>% # set timeval\n  px_save(\"time_px_example.px\")\n```\n:::\n\n\n\n\n\nThe former PX-file's metadata also had metadata for the variable `Quarter`, which we now has removed from the data. Luckily the metadata is also updated when modifying the data, so the metadata for `Quarter` is removed, but all other metadata, like title, content, source etc. are preserved from the initial PX-file.\n\nThe code below gives same result, but with an intermediate step, which gives beter readability.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Simpler code\"}\ntime_example_data <- px(\"data/Employment_example_tab1.px\") %>% \n  px_data() %>% \n  # Use .keep to only preserve Time and drop quarter\n  mutate(Time = paste0(Time, Quarter), .keep = \"unused\") \n\n# Modifying data in the PX-file\npx(\"data/Employment_example_tab1.px\") %>% \n  px_data(time_example_data) %>% \n  px_timeval(\"Time\") %>% # Set timeval\n  px_save(\"time_px_example.px\") # Save new file\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}