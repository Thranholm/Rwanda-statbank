{
  "hash": "31282434c09bb529642c99302244c447",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Multiple languages in PX-files\"\nformat: html\neditor_options: \n  chunk_output_type: console\n---\n\n\n\n\n\n## Adding another language to your PX-files\n\nMultiple countries have more than one official language, and even though a country does not have multiple languages, it may still be valuable to add another language to the PX-web tables to increase accessibility.\n\nFor example, Finland has three languages in their [Statistical Database](https://pxdata.stat.fi/PxWeb/pxweb/en/StatFin/): the country's two official languages, Finnish and Swedish, and then English to increase accessibility for a broader audience. Likewise, Greenland also has three languages in their [Statbank](https://bank.stat.gl/pxweb/en/Greenland/): Greenlandic, Danish, and English. Both use PX-files and PX-web to publish their tables.\n\nA main argument for developing `pxmake` from [Statistics Greenland](https://statisticsgreenland.github.io/pxmake/) was to have a good tool for handling multiple languages in PX-files, and as we will see below, it achieves just that.\n\n### The `px_languages()` function\n\nWhen making a PX-file using `pxmake`, the language keyword does not have a default. For instance, the tables we made with data from the Rwandan Labour Force Survey in the chapter [Updating PX-files](px_update_files.qmd) do not have a language set. This can easily be set to English using the function `px_language()`, which sets the main language of the PX-file.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(pxmake)\n\n# Importing our px-file about labour force\npx_en <- px(\"lfs_tab1.px\") %>% \n  # set language to English\n  px_language(\"en\")\n\n# Check the language\npx_en %>% \n  px_language()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"en\"\n```\n\n\n:::\n:::\n\n\n\n\n\nNow we have set the language to \"en\" for English using the `px_language()` function. Note that there are two language functions in `pxmake`: `px_language()`, which we just showcased, and `px_languages()` for setting multiple languages.\n\nLet's add another language to our PX-file, so it is in both English and French. Here we use the `px_languages()` function, and we still need to set English as the main language via `px_language()`[^1].\n\n[^1]: This may be changed in a future version so `px_languages(c(\"en\", \"fr\")` just can be used with the first as the main language.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npx(\"lfs_tab1.px\") %>% \n  px_language(\"en\") %>% \n  px_languages(c(\"en\", \"fr\")) %>% \n  # print title to see what happened\n  px_title()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 2\n  language value                                                                \n  <chr>    <chr>                                                                \n1 en       Sex, province and highest attained education in Rwanda Labour Force …\n2 fr       Sex, province and highest attained education in Rwanda Labour Force …\n```\n\n\n:::\n:::\n\n\n\n\n\nThe code above added English and French as languages and printed the title. Now we have two titles, and in the language column we can see \"en\" and \"fr\". However, as we can see, both titles are (for now) in English. So the `px_languages()` function has just duplicated the current titles, value labels, etc., and then `pxmake` leaves it to the language experts to translate.\n\n### Translating in R\n\nWe can use the functions in `pxmake` to translate our PX-file directly in R. However, this process can be quite code-heavy and requires that the translators know how to code in R. As we will see below, using Excel in the translation process may in many situations be a better solution.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npx(\"lfs_tab1.px\") %>% \n  px_language(\"en\") %>% \n  px_languages(c(\"en\", \"fr\")) %>% \n  # Translating title to French\n  px_title(tribble(~language, ~value,\n                   \"en\",  \"Sex, province and highest attained education in Rwanda Labour Force Survey 2023-2024\",\n                   \"fr\", \"Sexe, province et niveau d'éducation le plus élevé atteint dans l'Enquête sur la main-d'œuvre du Rwanda 2023-2024\")) %>% \n  # Print title to see the changes\n  px_title()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 2\n  language value                                                                \n  <chr>    <chr>                                                                \n1 en       Sex, province and highest attained education in Rwanda Labour Force …\n2 fr       Sexe, province et niveau d'éducation le plus élevé atteint dans l'En…\n```\n\n\n:::\n:::\n\n\n\n\n\nNow we have translated the title directly in R (with help from a chatbot). For the title, it was relatively simple to translate directly in R, but we still have many more fields to translate, for example, our value labels.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npx(\"lfs_tab1.px\") %>% \n  px_language(\"en\") %>% \n  px_languages(c(\"en\", \"fr\")) %>% \n  px_values()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 36 × 4\n   `variable-code` code   language value \n   <chr>           <chr>  <chr>    <chr> \n 1 LFS_year        2023   en       2023  \n 2 LFS_year        2023   fr       2023  \n 3 LFS_year        2024   en       2024  \n 4 LFS_year        2024   fr       2024  \n 5 A01             Female en       Female\n 6 A01             Female fr       Female\n 7 A01             Male   en       Male  \n 8 A01             Male   fr       Male  \n 9 A01             Total  en       Total \n10 A01             Total  fr       Total \n# ℹ 26 more rows\n```\n\n\n:::\n:::\n\n\n\n\n\nWe can, for instance, change the translation for the variable sex.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npx(\"lfs_tab1.px\") %>% \n  px_language(\"en\") %>% \n  px_languages(c(\"en\", \"fr\")) %>% \n  px_values(tribble(~`variable-code`, ~code, ~language, ~values,\n                    \"A01\", \"Female\", \"fr\", \"Femme\",\n                    \"A01\", \"Male\", \"fr\", \"Homme\")) %>% \n  px_values()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 36 × 4\n   `variable-code` code   language value \n   <chr>           <chr>  <chr>    <chr> \n 1 LFS_year        2023   en       2023  \n 2 LFS_year        2023   fr       2023  \n 3 LFS_year        2024   en       2024  \n 4 LFS_year        2024   fr       2024  \n 5 A01             Female en       Female\n 6 A01             Female fr       Femme \n 7 A01             Male   en       Male  \n 8 A01             Male   fr       Homme \n 9 A01             Total  en       Total \n10 A01             Total  fr       Total \n# ℹ 26 more rows\n```\n\n\n:::\n:::\n\n\n\n\n\nThis just translated the values for sex to French, but we still need to translate all other variables, which would require a lot of coding.\n\n### Translating using Excel (recommended)\n\nRather than using R to translate our PX-file via code, we can easily export our PX-file to Excel, do the translations in Excel, and then import the translated PX-file to R. This also makes it possible to share the file with non-coders for translation, and even if they are able to code in R, it might still be easier to do the translation in Excel. Alternatively, the PX-file can be imported to [PX-edit](https://stat.fi/tup/tilastotietokannat/px-tuoteperhe_en.html) and translated there.\n\nFor exporting to Excel, we use `px_save()`, and since the data cannot be translated — only the metadata (value labels, names, etc.) — we set the argument `save_data = FALSE`. This might be particularly helpful if we have a large PX-file with lots of data. For the file in this example, it does not make a big difference whether or not to include the data.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npx(\"lfs_tab1.px\") %>% \n  px_language(\"en\") %>% \n  px_languages(c(\"en\", \"fr\")) %>% \n  px_save(\"lfs_tab1_translate.xlsx\", save_data = FALSE)\n```\n:::\n\n\n\n\n\nThe code saves an Excel document and we can now do our translations in the different sheets. The sheet for \"Cells\" is shown below, where we can translate the value labels of our variables into French in the column \"fr_code-label\".\n\n![](pictures/excel_non_translated.png)\n\nWhen we have finished translating, the translation can be imported back into R using the `px()` function.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npx(\"lfs_tab1_translate.xlsx\")\n```\n:::\n\n\n\n\n\nAs we saved it without data, we have to set the data for our px-object in R using the `px_data()` function.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# import translated excel\npx(\"lfs_tab1_translate.xlsx\") %>% \n  # attach the data from our initial PX-file\n  px_data(px_data(px(\"lfs_tab1.px\")))\n```\n:::\n\n\n\n\n\nWe use `px_data` twice. First to retrieve the data from our PX-file `lfs_tab1.px` and then to attach that data to the imported translated Excel document. If we don't have any further changes to the file, we can then save the translated PX-file and upload it to PX-web.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npx(\"lfs_tab1_translate.xlsx\") %>% \n  # attach the data from our initial PX-file\n  px_data(px_data(px(\"lfs_tab1.px\"))) %>% \n  # export the PX-file\n  px_save(\"lfs_tab1_translate.px\")\n```\n:::\n\n\n\n\n\nNow we are ready to get our PX-file with two languages (English and French) to PX-web, and the user can change between the two. Note that this approach of having multiple languages in one PX-file is highly recommended instead of having one file for each language. The latter is error-prone if the data gets updated, as you have to keep track of updating all the files, which is bound to go wrong at some point.",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}