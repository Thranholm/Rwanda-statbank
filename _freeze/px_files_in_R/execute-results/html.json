{
  "hash": "c7f14004df163a44374be0ba10721ef2",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"PX files in R\"\nformat: html\neditor_options: \n  chunk_output_type: console\n---\n\n\n\n\n\n## PX-Files and the PX-File Format\n\n### What is the PX-file format?\n\nThe PX-file format is a specialized data format developed specifically for storing and distributing multidimensional statistical data. Originally created by [Statistics Sweden (SCB)](https://www.scb.se/en/) in the 1990s, the PX format has become the standard format for official statistics across most Nordic countries and is increasingly used by statistical organizations worldwide.\n\nThe name \"PX\" comes from the original Swedish-developed software program \"PC-AXIS\" to display and work with large tabular data. The format was designed to address the unique needs of statistical data distribution, where both data values and comprehensive metadata must be preserved and transmitted together.\n\n### Use of PX-files for dissemination of official statistics\n\nThe real power and motivation for PX-files stems from the possibility of disseminating the files through [PX-web](https://www.scb.se/en/services/statistical-programs-for-px-files/px-web/). PX-web can be used to publish statistics in a web-based database. Since January 1, 2016, it has been free for government agencies and municipalities, international NSIs, and international organizations of statistics to use free of charge.\n\nWhen putting the PX-files in PX-web, it is possible to create a StatBank or Statistical Database with any imaginable official statistics, e.g., population, labor market, business, or financial statistics. Making the statistics available for the public and policy makers, so people can be informed and ultimately support better and more efficient policy making.\n\nThe PX-file and PX-web to create a StatBank are used by different national statistical institutes, e.g., Sweden, Norway, Finland, Iceland, Faroe Islands, Greenland, Latvia, Moldova, Ghana, and more. So the use has spread from the Nordic to many other countries. There is an R package [`pxweb`](https://ropengov.github.io/pxweb/index.html) that provides handy functions to work with the PX-web API. It also has a hardcoded list of 30 countries and agencies that use PX-web for disseminating statistics, but their list is not exhaustive.\n\n## PX-files in R\n\nR can be used to create and work with PX-files. Statistics Greenland has developed a great package for working with PX-files in R, called `pxmake`. In its simplest form, it can take an existing data frame in R and turn it into an exported PX-file. More information can be found on the [pxmake webpage](https://statisticsgreenland.github.io/pxmake/). In the following documents, `pxmake`'s functions will be used to show how to update existing files, create new files, and change multiple files at once.\n\nThe following code showcases a basic example for generating a PX-file:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Install pxmmake if not already installed\ninstall.packages(\"pxmake\")\n\n# Load pxmake\nlibrary(pxmake)\n\n# Dataframe we want to convert to PX-file\ndf <- expand.grid(age = 20:40,\n                 sex = c(\"M\", \"F\"),\n                 urban = c(\"Urban\", \"Rural\"))\n\n# add counts \ndf$value <- sample(100:1000, nrow(df), replace = TRUE)\n\n# Creating px object in R \npx_df <- px(df)\n\n# Saving the px file in current working directory\npx_save(px_df, path = \"test_px_file.px\")\n```\n:::\n\n\n\n\n\nThis is not a good PX-file yet! We need to add more metadata for it to be a proper PX-file.\n\n## Key characteristics of PX files\n\n### Self-documenting structure\nPX files are self-documenting, meaning they contain both the statistical data and all necessary metadata within a single file. This includes variable descriptions, data sources, contact information, creation dates, and methodological notes. This comprehensive approach ensures that users receive not just numbers, but the context needed to understand and properly use the data.\n\n## File structure and components\n\n### Metadata section\nThe metadata section appears at the beginning of the file and contains descriptive information about the dataset. This includes:\n\n- **Dataset identification**: Title, description, and unique identifiers\n- **Variable definitions**: Names, labels, and valid values for each dimension\n- **Time information**: Time periods covered and temporal formatting\n- **Geographic coding**: Geographic classifications and hierarchies\n- **Data source**: Origin, collection method, and responsible organization\n- **Technical details**: Creation date, language, character encoding\n- **Contact information**: Who to contact for questions or additional information\n\n### Data section\nThe data section contains the actual statistical values, organized according to the dimensional structure defined in the metadata. The data is typically arranged in a specific order that corresponds to the variable hierarchy specified in the metadata section.\n\nThe documentation for the PX-file format can be found from Statistics Sweden [here](https://www.scb.se/en/services/statistical-programs-for-px-files/px-file-format/).\n\n### Metadata in `pxmake`\n\nThe `pxmake` package has functions to add metadata to our PX-file named after which keyword or metadata we want to create or edit. So if we want to add a title to our PX-file, we can do it with the function `px_title`.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npx_df <- px_title(px_df, \"Test PX-file\")\n```\n:::\n\n\n\n\n\nWith the power of the `magrittr` pipe, we can add many more metadata functions together. The following guides will exemplify this. A list of all supported keywords (and not supported keywords) can be found [here](https://statisticsgreenland.github.io/pxmake/).\n\nRead the introduction from the `pxmake` package on how to create your [first PX-file](https://statisticsgreenland.github.io/pxmake/articles/first-px-file.html), which has a more extended example of making a proper PX-file.",
    "supporting": [
      "px_files_in_R_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}